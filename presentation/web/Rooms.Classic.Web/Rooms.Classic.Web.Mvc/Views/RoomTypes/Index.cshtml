<div id="app">
    <div v-if="isLoading" class="loading-overlay">
        <loader></loader>
    </div>
    <div v-else class="card shadow-lg">
        <div class="card-body">
            <h3 class="text-center"> Room Types </h3>
            <h4 class="text-center mt-1 mb-2 text-black-50"> Total: {{ totalItems }} </h4>
            <hr/>

            <div class="text-center d-flex align-items-center center-content mb-4">
                <button type="button" v-on:click="openModal()" class="btn btn-primary mt-2 text-center"> <i class="bi bi-search"></i></button>
            </div>
            <div class="center-content">
                <table class="table table-hover col-md-8">
                    <thead>
                        <tr>
                            <th>
                                Name
                            </th>
                            <th>
                                Created At
                            </th>
                            <th>
                                Operations
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="r in roomTypes">
                            <td>
                                {{ r.Name }}
                            </td>
                            <td>
                                {{ r.CreatedAt }}
                            </td>
                            <td>
                                <button type="button" v-on:click="redirectToDelete(r)" class="btn btn-danger">
                                    <i class="bi bi-trash2"></i>
                                </button>
                                <button v-on:click="redirectToEdit(r)" class="btn btn-warning">
                                    <i class="bi bi-pen"></i>
                                </button>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div ref="modalSearch" class="modal fade rounded-pill" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header d-flex justify-content-center">
                    <div class="text-center">
                        <h3 class="modal-title"> Search Room Types </h3>
                    </div>
                </div>
                <div class="modal-body">
                    <div class="form-group d-flex flex-column align-items-center">
                        <div class="form-horizontal">
                            <div class="text-center justify-content-center">
                                <label> Name </label>
                                <input class="form-control text-center mb-3" v-model="nameFilter" type="text" placeholder="Enter name" />

                                <label> Min Date </label>
                                <input class="form-control text-center mb-3" type="date" v-model="minFilter" />

                                <label> Max Date </label>
                                <input class="form-control text-center mb-3" type="date" v-model="maxFilter" />
                            </div>
                            <hr />
                            <div class="text-center mt-2">
                                <button type="button" class="btn btn-primary" v-on:click="search()"> <i class="bi bi-search"></i></button>
                                <button class="btn btn-danger " v-on:click="closeModal()">&times;</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script src="~/Scripts/vue/components/loader.js"></script>
    <script>
        Vue.use(Toasted, {
            position: 'bottom-center',
            duration: 3000
        });

        var app = new Vue({
            el: '#app',
            data: {
                roomTypes: [],
                urlBase: 'https://localhost:7055/RoomTypes/',
                isLoading: false,
                totalItems: 0,
                nameFilter: '',
                minFilter: '',
                maxFilter: '',
                modal: ''
            },
            created() {
                this.fetchRoomTypes();
                this.notify();
            },
            methods: {
                fetchRoomTypes() {
                    $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetAllAsync", "RoomTypes")',
                        contentType: "application/json; charset=utf-8",
                        dataType: 'json',
                        beforeSend: function(){
                            this.isLoading = true;
                        },
                        success: (response) => {
                            this.roomTypes = response.Value;
                            const paginationHeader = response.HttpApiResponse.Headers.find(header => header.Key === 'X-Pagination');
                            if (paginationHeader) {
                                let pagination = JSON.parse(paginationHeader.Value[0]);
                                this.totalItems = pagination.TotalItems;
                            }
                            this.formatCreatedAt();
                        },
                        error: error => console.log(error),
                        complete: () => this.isLoading = false
                    })
                },
                search() {
                    this.isLoading = true;
                    this.closeModal();
                    axios.get(this.mountUrlSearch()).then(response => {
                        this.roomTypes = response.data.value;
                        this.formatCreatedAt();
                    }).catch(error => {
                        console.log('Error');
                    }).finally(() => {
                        this.isLoading = false;
                        this.openModal();
                    });
                },
                mountUrlSearch() {
                    let urlSearch = this.urlBase + 'search?';
                    if (this.nameFilter) {
                        urlSearch = urlSearch + `name=${this.nameFilter}&`;
                    }

                    if (this.minFilter) {
                        urlSearch = urlSearch + `minDate=${this.minFilter}&`;
                    }

                    if (this.maxFilter) {
                        urlSearch = urlSearch + `maxDate=${this.maxFilter}&`;
                    }

                    return urlSearch;
                },
                notify() {
                    const key = "success";
                    const notification = localStorage.getItem(key);
                    if (notification) {
                        this.$toasted.success(notification);
                        localStorage.removeItem(key);
                    }
                },
                formatCreatedAt() {
                    this.roomTypes.forEach(r => {
                        r.CreatedAt = this.formatDate(this.parseDate(r.CreatedAt));
                    });
                },
                parseDate(date) {
                    const timestamp = parseInt(date.replace(/\/Date\((\d+)\)\//, '$1'), 10);
                    return new Date(timestamp);
                },
                formatDate(date) {
                    return date.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric' });
                },
                formatDateISO(date) {
                    return date instanceof Date && !isNaN(date) ? date.toISOString().split('T')[0] : '';
                },
                redirectToDelete(roomType) {
                    window.location.href = `/roomtypes/delete/${roomType.id}`;
                },
                redirectToEdit(roomType) {
                    window.location.href = `/roomtypes/edit/${roomType.id}`;
                },
                openModal() {
                    if (!this.modal) {
                        this.modal = new bootstrap.Modal(this.$refs.modalSearch);
                    }
                    this.modal.show();
                },
                closeModal() {
                    if (this.modal) {
                        console.log('Here close modal');
                        this.modal.hide();
                    }
                }
            }
        });
</script>
}
